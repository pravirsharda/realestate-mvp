# --- Add this near the top of the file, before load_data is used ---
import streamlit as st
import pandas as pd
import io

st.set_page_config(layout="wide", page_title="GM Dashboard - Lead Intelligence")

st.title("GM Dashboard â€” Lead Intelligence")
st.markdown("Scored leads generated by the AI engine. Use the filters, inspect leads, and download CSV to share with your agents.")

# Upload widget (browser)
uploaded = st.file_uploader("Upload scored_leads_output.csv (or drag & drop)", type=["csv"])
if uploaded is not None:
    try:
        df = pd.read_csv(uploaded)
    except Exception as e:
        st.error(f"Could not read uploaded CSV: {e}")
        st.stop()
else:
    # fallback: load from repo file if present
    try:
        df = pd.read_csv("scored_leads_output.csv")
    except Exception:
        df = pd.DataFrame()
        st.warning("No scored leads found. Upload or generate scored_leads_output.csv in the app directory.")
        st.stop()
# --- rest of the app uses 'df' as before ---

if df.empty:
    st.warning("No scored leads found. Upload or generate scored_leads_output.csv in the app directory.")
else:
    # Sidebar filters
    st.sidebar.header("Filters & Export")
    min_score = int(st.sidebar.slider("Min Score", 0, 100, 60))
    area_filter = st.sidebar.multiselect("Areas / Projects", options=sorted({a.strip() for ar in df['areas'].dropna() for a in str(ar).split(',')}), default=None)
    tag_filter = st.sidebar.multiselect("Tags", options=sorted(df['tag'].unique()), default=None)
    
    filtered = df[df['score'] >= min_score]
    if area_filter:
        filtered = filtered[filtered['areas'].apply(lambda x: any(a.strip() in x for a in area_filter))]
    if tag_filter:
        filtered = filtered[filtered['tag'].isin(tag_filter)]
    
    st.write(f"Showing {len(filtered)} leads (filtered)")
    
    # Main layout: left table, right detail + distribution
    left_col, right_col = st.columns([1.2, 1])
    
    with left_col:
        st.subheader("Leads")
        # Display selected columns for brevity
        display_df = filtered[['lead_id','name','location','areas','budget_min','budget_max','device','platforms','score','tag']].copy()
        display_df['budget'] = display_df['budget_min'].fillna(0).astype(int).astype(str) + ' - ' + display_df['budget_max'].fillna(0).astype(int).astype(str)
        st.dataframe(display_df.rename(columns={'lead_id':'ID','name':'Name','location':'Location','areas':'Areas','device':'Device','platforms':'Platforms','score':'Score','tag':'Tag'}), height=480)
        
        # CSV download
        csv = filtered.to_csv(index=False)
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="scored_leads_export.csv">ðŸ“¥ Download filtered CSV</a>'
        st.markdown(href, unsafe_allow_html=True)
        
    with right_col:
        st.subheader("Lead Details & Distribution")
        selected = st.selectbox("Select lead to inspect", options=filtered['lead_id'].tolist() if not filtered.empty else [])
        if selected:
            row = filtered[filtered['lead_id'] == selected].iloc[0]
            st.markdown(f"**{row['name']}** â€” {row['location']}  \n**Score:** {row['score']} â€” **{row['tag']}**")
            st.markdown(f"**Device:** {row.get('device','-')}  \n**Platforms:** {row.get('platforms','-')}  \n**Areas:** {row.get('areas','-')}  \n**Last Seen (days):** {row.get('last_seen_days','-')}  \n**Frequency (7d):** {row.get('searches_last_7d','-')}")
            st.markdown("**Behavior summary:**")
            beh = row.get('behavior','')
            if pd.notna(beh):
                # behavior stored as list-like in CSV, but we may display as raw string
                st.write(beh)
            st.markdown("**AI Reasoning:**")
            st.write(row.get('reasoning','-'))
            st.markdown("**Next Best Action:**")
            st.write(row.get('next_action','-'))
        # Distribution chart by area/project
        st.markdown("---")
        st.markdown("**Suggested Distribution (by Area/Project)**")
        # compute distribution
        dist = {}
        for a in filtered['areas'].dropna():
            for part in str(a).split(','):
                k = part.strip()
                dist[k] = dist.get(k,0) + 1
        if dist:
            dist_df = pd.DataFrame([{'Area':k,'Leads':v} for k,v in dist.items()]).sort_values('Leads', ascending=False)
            st.table(dist_df)
        else:
            st.info("No area/project tags found in filtered leads.")
