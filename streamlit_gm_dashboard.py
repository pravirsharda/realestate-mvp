# Replace the entire streamlit_gm_dashboard.py with this content

import streamlit as st
import pandas as pd
import io

# Simple password gate using Streamlit Secrets (optional)
PASSWORD = st.secrets.get("GM_DASHBOARD_PASSWORD", None)
if PASSWORD:
    # show password prompt in sidebar
    pw = st.sidebar.text_input("Enter dashboard password", type="password")
    if pw != PASSWORD:
        st.title("Lead Intelligence â€” Access Restricted")
        st.write("Please enter the password in the left sidebar to continue.")
        st.stop()

st.set_page_config(layout="wide", page_title="GM Dashboard - Lead Intelligence")

st.title("GM Dashboard â€” Lead Intelligence")
st.markdown("Scored leads generated by the AI engine. Use filters, inspect leads, and download CSV to share with your agents.")

# --- Upload / Load CSV logic ---
uploaded = st.file_uploader("Upload scored_leads_output.csv (drag & drop or choose file)", type=["csv"])
if uploaded is not None:
    try:
        df = pd.read_csv(uploaded)
    except Exception as e:
        st.error(f"Could not read uploaded CSV: {e}")
        st.stop()
else:
    # Fallback: attempt to load the file from the repo (Streamlit Cloud will have repo files)
    try:
        df = pd.read_csv("scored_leads_output.csv")
    except Exception:
        df = pd.DataFrame()

if df.empty:
    st.warning("No scored leads found. Upload a scored_leads_output.csv or add one to the app directory in your GitHub repo.")
    st.stop()

# Normalize expected columns if needed
expected_cols = ["lead_id","name","location","device","platforms","areas","budget_min","budget_max",
                 "searches_last_7d","searches_last_30d","last_seen_days","viewed_mortgage_calc",
                 "project_keywords_matches","behavior","score","tag","reasoning","next_action"]
for c in expected_cols:
    if c not in df.columns:
        df[c] = ""

# Sidebar filters
st.sidebar.header("Filters & Export")
min_score = int(st.sidebar.slider("Min Score", 0, 100, 60))
# Extract unique areas safely
all_areas = sorted({a.strip() for ar in df['areas'].dropna() for a in str(ar).split(',') if a.strip()})
area_filter = st.sidebar.multiselect("Areas / Projects", options=all_areas, default=None)
tag_filter = st.sidebar.multiselect("Tags", options=sorted(df['tag'].unique()), default=None)

# Apply filters
filtered = df[df['score'].astype(int) >= min_score]
if area_filter:
    filtered = filtered[filtered['areas'].apply(lambda x: any(a in str(x) for a in area_filter))]
if tag_filter:
    filtered = filtered[filtered['tag'].isin(tag_filter)]

st.write(f"Showing {len(filtered)} leads (filtered)")

# Main layout
left_col, right_col = st.columns([1.2, 1])

with left_col:
    st.subheader("Leads")
    display_df = filtered[['lead_id','name','location','areas','budget_min','budget_max','device','platforms','score','tag']].copy()
    # Build a friendly budget column
    display_df['budget'] = display_df['budget_min'].fillna(0).astype(int).astype(str) + ' - ' + display_df['budget_max'].fillna(0).astype(int).astype(str)
    display_df = display_df.rename(columns={
        'lead_id':'ID','name':'Name','location':'Location','areas':'Areas','device':'Device',
        'platforms':'Platforms','score':'Score','tag':'Tag'
    })
    st.dataframe(display_df[['ID','Name','Location','Areas','budget','Device','Platforms','Score','Tag']], height=480)

    # CSV download using Streamlit native download button
    csv_bytes = filtered.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="ðŸ“¥ Download filtered CSV",
        data=csv_bytes,
        file_name="scored_leads_export.csv",
        mime="text/csv"
    )

with right_col:
    st.subheader("Lead Details & Distribution")
    selected_options = filtered['lead_id'].tolist()
    if selected_options:
        selected = st.selectbox("Select lead to inspect", options=selected_options)
        if selected:
            row = filtered[filtered['lead_id'] == selected].iloc[0]
            st.markdown(f"**{row['name']}** â€” {row['location']}  \n**Score:** {row['score']} â€” **{row['tag']}**")
            st.markdown(f"**Device:** {row.get('device','-')}  \n**Platforms:** {row.get('platforms','-')}  \n**Areas:** {row.get('areas','-')}")
            st.markdown(f"**Last Seen (days):** {row.get('last_seen_days','-')}  \n**Frequency (7d):** {row.get('searches_last_7d','-')}")
            st.markdown("**Behavior summary:**")
            beh = row.get('behavior','')
            if pd.notna(beh) and str(beh).strip():
                # split on common separator used in exports
                parts = [p.strip() for p in str(beh).split("|") if p.strip()]
                for p in parts:
                    st.write("- " + p)
            else:
                st.write("- (no behavior details)")
            st.markdown("**AI Reasoning:**")
            st.write(row.get('reasoning','-'))
            st.markdown("**Next Best Action:**")
            st.write(row.get('next_action','-'))
    else:
        st.info("No leads available to select (check filters).")

    st.markdown("---")
    st.markdown("**Suggested Distribution (by Area/Project)**")
    # compute distribution
    dist = {}
    for a in filtered['areas'].dropna():
        for part in str(a).split(','):
            k = part.strip()
            if not k:
                continue
            dist[k] = dist.get(k,0) + 1
    if dist:
        dist_df = pd.DataFrame([{'Area':k,'Leads':v} for k,v in dist.items()]).sort_values('Leads', ascending=False)
        st.table(dist_df)
    else:
        st.info("No area/project tags found in filtered leads.")
